public class Theater {
    // 판매원
    private TicketSeller ticketSeller;

    // 판매원을 초기화하는 생성자
    public Theater(TicketSeller ticketSeller) {
        this.ticketSeller = ticketSeller;
    }

    // 관람객 입장
    public void enter(Audience audience) {
        ticketSeller.sellTo(audience);
    }
    // 소극장은 관람객의 가방을 열어 그 안에 초대장이 들엉있는 지 살펴본다.
    // 가방 안에 초대장이 들어 있으면 판매원은 매표소에 보관돼있는 티켓을 관람객의 가방 안으로 옮긴다.
    // 가방 안에 초대장이 들어 있지 않다면 관람객의 가방에서 티켓 금액만큼의 현금을 꺼내 매표소에 적립한 후에
    // 매표소에 보관돼 있는 티켓을 가방 안으로 옮긴다.

    // 무엇이 문제일까? 문제는 관람객과 판매원이 소극장의 통제를 받는 수동적인 존재란 점... (자율적인 객체)
    // 관람객의 : 관람객 입장에서 문제는 소극장이라는 제 3자가 초대장을 확인하기 위해 관람객의 가방을 마음대로 열어 본다는 데 있다.
    // 만약 누군가가 여러분의 허락 없이 가방 안의 내용물을 마음대로 뒤적이고 돈을 가져간다면?
    // 넋놓고 다른 사람이 여러분의 가방르 헤집어 놓는 것을 멍하니 바라만 볼 것 인가?

    // 판매원 : 소극장이 여러분의 허락도 없이 매표소에 보관 중엔 티켓과 현금을 마음대로 접근 할 수 있기 때문에...
    // 더큰 문제는 티켓을 꺼내 관람객의 가방에 집어넣고 관람객에게서 받은 돈을 매표소에 적립하는 일은 여러분이 아닌 소극장이 수행...
    // 따라서 여러분은 매표소 안에 가만히 앉아 티켓이 하나씩 사라지고 돈이 저절로 쌓이는 광경을 두 손 호고 쳐다볼 수 밖에 없음...

    // 설계를 변경하기 어려운 이유
    // Theater(소극장)가 Audience와 TicketSeller 뿐만 아니라
    // Audience 소유의 Bag, Ticket가 근무하는 TicketOffice까지 마음대로 접근할 수 있기 때문
    // 해결 방법은 Audience와 TicketSeller가 직접 Bag과 TicketOffice를 처리하는 자율적인 존재가 되도록 설계 변경
}
